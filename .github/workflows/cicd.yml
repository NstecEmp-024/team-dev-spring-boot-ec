name: チーム開発演習(Spring Boot) - team-dev-spring-boot-ec

on:
  push:
    branches: [ productBranch ]          # productBranchブランチへのpush時に実行
#  pull_request:
#    branches: [ master ]          # masterブランチへのPR時にも実行

jobs:
  build-and-test:                  # テスト＋ビルドをまとめたジョブ
    runs-on: ubuntu-latest         # Ubuntu最新環境で実行

    # 
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: postgres       
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: ['5432:5432']
        options: >-
          --health-cmd "pg_isready -U postgres -d postgres"
          --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: ソースコードをチェックアウト
        uses: actions/checkout@v4  # GitHubリポジトリのコードを取得

      - name: Java 17 をセットアップ
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'  # AdoptOpenJDKの後継であるTemurinを使用
          java-version: '17'       # Javaのバージョンを指定

      - name: Gradle のキャッシュを設定
        uses: actions/cache@v3
        with:
          path: |                  # キャッシュ対象パス
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |          # キャッシュが見つからなかったときの復元キー
            ${{ runner.os }}-gradle-

      - name: gradlewに実行権限を付与
        run: chmod +x ./gradlew    # gradlewを実行できるように権限追加

      - name: psqlクライアントをインストール
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: DBとテーブル作成し初期データを作成する
        env:
          PGPASSWORD: postgres
        run: |
          for i in {1..30}; do
            if psql -h 127.0.0.1 -p 5432 -U postgres -d postgres -c "SELECT 1" >/dev/null 2>&1; then
              echo "Postgres is up"; break
            fi
              echo "Waiting for Postgres... ($i)"; sleep 1
          done
          psql -h 127.0.0.1 -p 5432 -U postgres -d postgres -tc "SELECT 1 FROM pg_database WHERE datname='fullness_ec'" | grep -q 1 \
            || psql -h 127.0.0.1 -p 5432 -U postgres -d postgres -c "CREATE DATABASE fullness_ec"

          psql -v ON_ERROR_STOP=1 \
               -h 127.0.0.1 -p 5432 \
               -U postgres -d postgres \
               -f src/main/resources/db/init.sql
          psql -v ON_ERROR_STOP=1 -h 127.0.0.1 -p 5432 -U postgres -d fullness_ec -f src/main/resources/db/init.sql

      - name: DBダンプ（診断）
        env:
          PGPASSWORD: postgres
        run: |
          echo '--- \dt public.* in fullness_ec ---'
          psql -h 127.0.0.1 -p 5432 -U postgres -d fullness_ec -c "\dt public.*"

          echo '--- sanity check counts ---'
          for t in department employee employee_account product_category product product_stock; do
            echo "# $t"
            psql -h 127.0.0.1 -p 5432 -U postgres -d fullness_ec -c "SELECT COUNT(*) FROM $t;" || true
          done
      - name: テストを実行
        env:
          SPRING_PROFILES_ACTIVE: test   # test用プロファイルを有効化する
        run: ./gradlew test        # JUnitなどのテストを実行

      - name: ビルドを実行
        run: ./gradlew bootJar     # Spring Bootの実行可能jarをビルド

      - name: アーティファクトをアップロード
        uses: actions/upload-artifact@v4
        with:
          name: app-jar            # アーティファクトの名前
          path: build/libs/fullness-ec-0.0.1-SNAPSHOT.jar # jarファイルの場所

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: アーティファクトをダウンロード
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: app

      - name: 秘密鍵を書き出す
        run: |
          echo "${{ secrets.AWS_EC2_PRIVATE_KEY }}" > ec2-key.pem
          chmod 600 ec2-key.pem

      - name: jarファイルをEC2のサーバに転送
        run: |
          scp -i ec2-key.pem -o StrictHostKeyChecking=no \
            app/fullness-ec-0.0.1-SNAPSHOT.jar \
            ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/fullness-ec-0.0.1-SNAPSHOT.jar

      - name: 稼働パスへ反映して再起動
        run: |
          ssh -i ec2-key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST_ID }} <<'EOF'
            set -e
            # 稼働ディレクトリに配置(差し替え)
            sudo mkdir -p /opt/fullness-ec
            sudo mv /home/ubuntu/fullness-ec-0.0.1-SNAPSHOT.jar /opt/fullness-ec/app.jar
            sudo chown root:root /opt/fullness-ec/app.jar

            # systemdにfullness-ec.serviceをsystemdに読み込ませる
            sudo systemctl daemon-reload || true

            # 再起動して状態確認
            sudo systemctl restart fullness-ec.service
            sudo systemctl status fullness-ec.service --no-pager -l || true
          EOF